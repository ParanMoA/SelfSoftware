### Spring DI 흉내내기

**[1] 변경에 유리한 코드**

**(1) 다형성, factory method**

- 변경 포인트를 어떻게 줄일 수 있을까?
    
    → 다형성을 이용하기, 메서드로 만들기
    

**(2) Map과 외부 파일**

Key - Value로 저장할 때?

- Map(Object, Object)
- Properties(String, String) → 파일을 읽고 저장하기 편함

프로그램 변경을 최소화 하기 위해서! → 외부 파일을 변경하도록 만듦 

변경 포인트를 최대한 분리함

**[2] 객체 컨테이너(ApplicationConntext) 만들기**

```java
class AppContext{
    Map map; //객체 저장소
    
    AppContext(){
        try {
            Properties p = new Properties();
            p.load(new FileReader("config.txt"));

            //Properties에 저장된 내용을 Map에 저장
            map = new HashMap(p);

            // 반복문으로 클래스 이름을 열어서 객체를 생성해서 다시 map에 저장
            for(Object key : map.keySet()){
                Class clazz = Class.forName((String)map.get(key));
                map.put(key, clazz.newInstance());
            }

            Class clazz = Class.forName(p.getProperty("car"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    Object getBean(String key){
        return map.get(key);
    }
}
```

**[3] 자동 객체 등록 하기 - Component Scannnig**

class 앞에 @Componenet 애너테이션을 붙임 → 패키지 내의 모든 클래스를 읽고 component가 붙은 클래스를 찾아서 객체를 생성해서 저장함. 

⇒ 클래스를 소문자로 바꾼 이름을 key로 하는 객체 생성됨.

**[4] 객체 찾기 - by Name, by Type**

이름으로 객체를 찾거나 타입으로 객체를 찾을 수 있음!

- 이름: Key를 확인
- 타입: Value를 확인

**[5] 객체를 자동 연결하기(1) - @Autowired - by 타입**

수동으로 객체 참조를 연결 하던것을 자동으로 할수 있음

iv에 @Autowired를 붙이면 객체 저장소에서 iv의 Value를 찾아서 정보를 저장함

**[6] 객체를 자동 연결하기(2) - @Resource - by 이름**

iv에 @Resource를 붙이면 객체 저장소에서 iv의 Key를 찾아서 정보를 저장함.

코드가 아니라 파일을 수정하도록!!

: xml 파일을 통해 값을 지정한다. 

→ property 태그를 쓰려면 setter가 있어야함!!

→ constructor-arg 태그를 쓰려면 생성자가 있어야함!! 기본 생성자 만들기

@Autowired 애노테이션을 쓰려면 원래 xml 파일에 <context: annotation-config/>가 포함되어 있어야 하지만 <context: component-scan 이 이 역할을 대신 해줌!

byType으로 찾을때는 같은 타입이 여러개면 안되기 때문에 한 타입이 여러개일때는 byName으로 찾아야됨!

getBean으로 byType 할때는 같은 타입이 여러개면 에러가 나지만 

@Autowired의 특성상 한 타입이 여러개면 Name으로 찾기 때문에 에러가 안남

→ 이때 특정 클래스를 지정해주고 싶으면 @Qualifier 애노테이션으로 지정